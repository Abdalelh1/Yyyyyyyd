name: Android Build CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        api_level: [28, 29, 30]
        arch: [armeabi-v7a, arm64-v8a]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branchName }}
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
      - name: Cache Gradle build output
        uses: actions/cache@v2
        with:
          path: app/build
          key: ${{ runner.os }}-gradle-build-${{ hashFiles('**/build.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-build-
          
      - name: set up JDK 17
        uses: docker://openjdk:17-jdk-alpine3.13
        with:
          gradle-version: '8.1'

      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Store secrets in local.properties & build apk
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_PATH: ${{ secrets.KEY_PATH }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          BASE64_STRING: ${{ secrets.KEY_BASE64 }}
        run: |
          echo "${BASE64_STRING}" | base64 --decode > "./${KEY_PATH}"
          ls -la ${KEY_PATH}
          cat ${KEY_PATH}
          ./gradlew :app:assembleRelease --stacktrace
          rm -f "./${KEY_PATH}"
      - name: Upload APK to Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_RELEASE }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app/build/outputs/apk/release/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive
