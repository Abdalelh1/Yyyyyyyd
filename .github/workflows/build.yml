name: Android Build CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.versionInfo.outputs.version }}


    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branchName }}

      - name: Cache Android SDK
        uses: actions/cache@v2
        with:
          path: ~/.android
          key: ${{ runner.os }}-sdk-${{ hashFiles('**/build.gradle') }}
          restore-keys: ${{ runner.os }}-sdk-

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.1

      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.0.0
      - name: Bump version
        id: bump_version
        env:
          GITHUB_TOKEN: ${{ secrets.JJ }}
          commit: ${{ github.event.head_commit.message }}
          old: ${{ steps.previoustag.outputs.tag }}
        run: |
          # Extract version components
          major=$(echo "${old}" | awk -F. '{print $1}')
          minor=$(echo "${old}" | awk -F. '{print $2}')
          patch=$(echo "${old}" | awk -F. '{print $3}')
          
          # Check commit message for version bump keywords
          if echo "${commit}" | grep -q -w "major"; then
            major=$((major + 1))
            minor=0
            patch=0
          elif echo "${commit}" | grep -q -w "minor"; then
            minor=$((minor + 1))
            patch=0
          elif echo "${commit}" | grep -q -w "patch"; then
            patch=$((patch + 1))
          fi
          # Construct new version string
          new_version="${major}.${minor}.${patch}"

          # Output new version as an environment variable
          echo "version=${new_version}" >> "$GITHUB_ENV"
      - name: apk
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_PATH: ${{ github.workspace }}/${{ secrets.KEY_PATH }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          BASE64_STRING: ${{ secrets.KEY_BASE64 }}
          new: ${{ env.version }}
        run: |
          echo "${BASE64_STRING}" | base64 --decode > ${KEY_PATH}
          major=$(echo "${new}" | awk -F. '{print $1}')
          minor=$(echo "${new}" | awk -F. '{print $2}')
          patch=$(echo "${new}" | awk -F. '{print $3}')
          property_content="major=${major}\nminor=${minor}\npatch=${patch}"
          # Write the property file
          echo -e "${property_content}" > version.properties
          ./gradlew :app:assembleRelease --scan
          rm -f ${KEY_PATH}
       
      # attaches the build apks in workflow run page 
      - uses: actions/upload-artifact@v3
        with:
          name: builds
          path: ${{ github.workspace }}/app/build/outputs/apk/release/*.apk
          
      # attaches the build report in workflow run page 
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ github.workspace }}/build-reports
          path: ${{ github.workspace }}/build/reports/
  
  release:
    name: Release APK
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Download APK from build
        uses: actions/download-artifact@v1
        with:
          name: builds
      - name: print file name
        run: |
          cd builds
          ls
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.JJ }}
        with:
          tag_name: ${{ needs.build.outputs.version }}
          release_name: ${{ env.version }}
          draft: false
          prerelease: false
          files: ${{ github.workspace }}/builds/*.apk
